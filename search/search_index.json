{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"git fixup","text":""},{"location":"#make-rewriting-history-great-again","title":"Make rewriting history great again","text":""},{"location":"#intro","title":"Intro","text":"<ol> <li>What it is not? Not another basics tutorial.</li> <li>Why? Usually not time to explain.</li> <li>What it is it? How to make your git history great again.</li> </ol> <p>source: https://pypi.org/project/git-mr-linear/</p> <p></p> <p>source: https://www.clean-flo.com/product/cc-clean-clear-concentrated-enzymes-1-gal/</p> <p>What git documentation says about rebase:</p> quote from https://git-scm.com/book/en/v2/Git-Branching-Rebasing <p>One point of view on this is that your repository\u2019s commit history is a record of what actually happened.</p> quote from https://git-scm.com/book/en/v2/Git-Branching-Rebasing <p>The opposing point of view is that the commit history is the story of how your project was made.  You wouldn\u2019t publish the first draft of a book, so why show your messy work? When you\u2019re working on a project, you may need a record of all your missteps and dead-end paths, but when it\u2019s time to show your work to the world, you may want to tell a more coherent story of how to get from A to B.</p>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>main.py         # Simple http server in python.\nREADME.md       # Simple Readme file.\n</code></pre>"},{"location":"foundations/","title":"Foundations","text":""},{"location":"foundations/#commands","title":"Commands","text":"<ul> <li><code>git commit \u2013all / git commit -a</code></li> <li><code>git commit --amend</code></li> <li><code>git reflog</code></li> <li><code>git adog</code></li> <li><code>git bdog</code></li> </ul>"},{"location":"foundations/#git-commit-all-git-commit-a","title":"<code>git commit \u2013all / git commit -a</code>","text":"<p>quote from https://git-scm.com/docs/git-commit#Documentation/git-commit.txt--a</p> <p>-a --all</p> <p>Tell the command to automatically stage files that have been modified and deleted, but new files you have not told Git about are not affected.</p> <p>Tip</p> <pre><code>$ git commit -am \"Meaingful message\"\n</code></pre>"},{"location":"foundations/#git-commit-amend","title":"<code>git commit --amend</code>","text":"<p>A convienient way to edit most recent commit.</p> <p>Tip</p> <pre><code>$ git commit --amend\n$ git commit --amend --no-edit\n$ git commit -a --amend --no-edit\n</code></pre>"},{"location":"foundations/#git-reflog","title":"<code>git reflog</code>","text":"<p>quote from https://www.atlassian.com/git/tutorials/rewriting-history/git-reflog</p> <p>Git keeps track of updates to the tip of branches using a mechanism called reference logs, or \"reflogs.\"</p> <p>Tip</p> <pre><code>$ git reflog\n645670d (HEAD -&gt; docs, origin/docs) HEAD@{0}: commit (amend): Add docs\n22e7f0a HEAD@{1}: commit (amend): Add docs\nea96a12 HEAD@{2}: commit (amend): Add docs\n32e1a3e HEAD@{3}: rebase (finish): returning to refs/heads/docs\n32e1a3e HEAD@{4}: rebase (fixup): Add basic docs\n81ec1df HEAD@{5}: rebase (start): checkout origin/master\ne574581 HEAD@{6}: checkout: moving from master to docs\n</code></pre>"},{"location":"foundations/#git-adog","title":"<code>git adog</code>","text":"<p>source https://stackoverflow.com/a/35075021</p> <p><code>.gitconfig</code></p> <pre><code>[alias]\nadog = log --all --decorate --oneline --graph\n</code></pre> <p>Info</p> <pre><code>$ git adog\n* 9cc057f (origin/datastudio-sql-user, datastudio-sql-user) Datastudio sql user\n* 9b238ce (HEAD -&gt; budgeting-k8s, origin/master, master) Add gke cluster (#3)\n| * fae80dc (refs/stash) On master: autostash\n|/|\n| * f507a23 index on master: d9b7ec4 Add db backups (#2)\n|/\n| * fbf294e (origin/add-k8s, add-k8s) fixup! fixup! Add gke cluster\n</code></pre>"},{"location":"foundations/#git-bdog","title":"<code>git bdog</code>","text":"<p>Show all commits from current branch to the parent branch.</p> <p><code>.gitconfig</code></p> <pre><code>[alias]\nbdog = \"!f() { git log $1..@ --decorate --oneline --graph; unset -f f; }; f\"\n</code></pre> <p>Tip</p> <pre><code>$ git bdog master\n</code></pre>"},{"location":"rebase/","title":"Rebase","text":"<p>source https://www.atlassian.com/git/tutorials/rewriting-history/git-rebase</p> <p>quote from https://www.atlassian.com/git/tutorials/rewriting-history/git-rebase</p> <p>Rebasing is the process of moving or combining a sequence of commits to a new base commit.</p> <p>quote from https://www.atlassian.com/git/tutorials/rewriting-history/git-rebase</p> <p>From a content perspective, rebasing is changing the base of your branch from one commit to another making it appear as if you'd created your branch from a different commit.  Internally, Git accomplishes this by creating new commits and applying them to the specified base.  It's very important to understand that even though the branch looks the same, it's composed of entirely new commits.</p> <p>quote from https://www.atlassian.com/git/tutorials/rewriting-history/git-rebase</p> <p>You want to get the latest updates to the main branch in your feature branch, but you want to keep your branch's history clean so it appears as if you've been working off the latest main branch.</p> <p>Tip</p> <pre><code>$ git fetch \u2013all\n$ git rebase origin/master\n</code></pre>"},{"location":"rebase_interactive/","title":"Rebase","text":"<p>source https://www.atlassian.com/git/tutorials/rewriting-history#git-rebase-i</p> <p>quote from https://www.atlassian.com/git/tutorials/rewriting-history#git-rebase-i</p> <p>This gives you the opportunity to alter individual commits in the process, rather than moving all commits.</p> <p>Tip</p> <pre><code>$ git fetch \u2013all\n$ git rebase -i origin/master --autostash\n</code></pre>"},{"location":"rebase_interactive/#rebase-interactive-in-action-basic","title":"Rebase interactive in action (basic)","text":"<p>What we get after <code>git rebase -i master</code>:</p> <p>git-rebase-todo</p> <pre><code>    pick 3648b69 Meaningful message\n    pick 929dbs2 Fix typo\n    pick a9di923 Another meaningful message\n    pick k372b37 Fix to previous typo fix\n\n    # Rebase 12d65ea..k372b37 onto 12d65ea (4 commands)\n#\n# Commands:\n# p, pick &lt;commit&gt; = use commit\n# r, reword &lt;commit&gt; = use commit, but edit the commit message\n# e, edit &lt;commit&gt; = use commit, but stop for amending\n# s, squash &lt;commit&gt; = use commit, but meld into previous commit\n# f, fixup [-C | -c] &lt;commit&gt; = like \"squash\" but keep only the previous\n#                    commit's log message, unless -C is used, in which case\n#                    keep only this commit's message; -c is same as -C but\n#                    opens the editor**\n# x, exec &lt;command&gt; = run command (the rest of the line) using shell\n# b, break = stop here (continue rebase later with 'git rebase --continue')\n# d, drop &lt;commit&gt; = remove commit\n# l, label &lt;label&gt; = label current HEAD with a name\n# t, reset &lt;label&gt; = reset HEAD to a label\n# m, merge [-C &lt;commit&gt; | -c &lt;commit&gt;] &lt;label&gt; [# &lt;oneline&gt;]\n#         create a merge commit using the original merge commit's\n#         message (or the oneline, if no original merge commit was\n#         specified); use -c &lt;commit&gt; to reword the commit message\n# u, update-ref &lt;ref&gt; = track a placeholder for the &lt;ref&gt; to be updated\n#                       to this position in the new commits. The &lt;ref&gt; is\n#                       updated at the end of the rebase\n#\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n#\n</code></pre> <p>Commands like <code>pick</code>, <code>reword</code> or <code>edit</code> are self-explanatory, but let's focus on <code>squash</code> and <code>fixup</code>. We changed order of commits and edited commands to clear history.</p> <p>reordered commits</p> <pre><code>    pick    3648b69 Meaningful message\n    squash  a9di923 Another meaningful message\n    pick    929dbs2 Fix typo\n    fixup   k372b37 Fix to previous typo fix\n</code></pre> <p>After saving it the window will be closed and we will be asked to edit commit message.</p> <p><code>COMMIT_EDITMSG</code></p> <pre><code># This is a combination of 2 commits.\n# This is the 1st commit message:\n\nMeaningful message\n\n# This is the commit message #2:\n\n# Another meaningful message\n</code></pre> <p>After editing it as <code>Brand new and more meaningful message</code> and saving it we are done. History of branch loos like this:</p> <p>Info</p> <pre><code>$ git bdog master\n* 132df6e (HEAD -&gt; feature/jira1234) Fix typo\n* cc0fe50 Brand new and more meaningful message\n</code></pre>"},{"location":"rebase_interactive/#rebase-interactive-in-action-fixup","title":"Rebase interactive in action (fixup!)","text":"<p>Let's say we have two commits in our branch so far.</p> <p>Info</p> <pre><code>$ git bdog master\n* 132df6e (HEAD -&gt; feature/jira1234) Fix typo\n* cc0fe50 Brand new and more meaningful message\n</code></pre> <p>So last commit is <code>Fix typo</code>, but we see we have a lot of typos in our code. We want to fix them but also want to achieve two contradictory things:</p> <ul> <li>we want to keep (temporarily) all typo fixes in separate commits.</li> <li>we want to have clean history after we are done so we will <code>fixup</code> all commits into one.</li> </ul> <p>Let's see how we can do it and explain later.</p> <p>Let's start with fixup to the specific commit.</p> <p>Fixup to the specific commit</p> <pre><code># we did some typo fixes\n$ git commit -a --fixup 132df6e\n</code></pre> <p>We make another typo fixes and we want to fixup our last commit but we instead of checking hash of the commit we want to fixup we can use <code>@</code> (is just a synonym/alias/shortcut for the special Git reference <code>HEAD</code>).</p> <p>Fixups to the last commits</p> <pre><code># we did another typo fixes\n$ git commit -a --fixup @\n# so many typos ...\n$ git commit -a --fixup @\n</code></pre> <p>Enough typos, but our first commits needs some love too.</p> <p>Fixup to the specific commit</p> <pre><code># cc0fe50 Brand new and more meaningful message\n$ git commit -a --fixup cc0fe50\n</code></pre> <p>This is how our <code>git-rebase-todo</code> history looks like now:</p> <p>Info</p> <pre><code>$ git rebase -i master\n\npick cc0fe50 Brand new and more meaningful message\npick 132df6e Fix typo\npick 86c1657 fixup! Fix typo\npick 0a3f0a2 fixup! fixup! Fix typo\npick c15c724 fixup! Brand new and more meaningful message\n</code></pre> <p>We can see the naming pattern but still manual editing is needed.  We are tired after fixing all those typos and we want to be done with it.</p> <p>This is what we want:</p> <p>Info</p> <pre><code>$ git rebase -i master\n\npick cc0fe50 Brand new and more meaningful message\nfixup c15c724 fixup! Brand new and more meaningful message\npick 132df6e Fix typo\nfixup 86c1657 fixup! Fix typo\nfixup 0a3f0a2 fixup! fixup! Fix typo\n</code></pre>"},{"location":"rebase_interactive/#automate-fixup","title":"Automate fixup!","text":"<p>We can automate this process by using <code>git rebase -i master --autosquash</code>. When use this command we will get the same result as above but without manual editing.</p> <p>Info</p> <pre><code>$ git rebase -i master --autosquash\n\npick cc0fe50 Brand new and more meaningful message\nfixup c15c724 fixup! Brand new and more meaningful message\npick 132df6e Fix typo\nfixup 86c1657 fixup! Fix typo\nfixup 0a3f0a2 fixup! fixup! Fix typo\n</code></pre> <p>Everything in order, everything is fixed, we are done, we can move on.</p> <p>Info</p> <pre><code>$ git bdog master\n\npick 7a76c69 Brand new and more meaningful message\npick a4003d8 Fix typo\n</code></pre>"},{"location":"rebase_interactive/#real-life-example","title":"Real life example","text":""},{"location":"sources/","title":"Sources","text":"<ul> <li>https://tobked.github.io/git_rebase_interactive</li> <li> <p>https://github.com/TobKed/git_rebase_interactive</p> </li> <li> <p>https://xkcd.com/1597/</p> </li> <li>https://xkcd.com/1296/</li> <li> <p>https://workchronicles.com/commit-messages/</p> </li> <li> <p>https://git-scm.com/book/en/v2/Git-Branching-Rebasing</p> </li> <li>https://git-scm.com/docs/git-commit#Documentation/git-commit.txt--a</li> <li>https://git-scm.com/docs/git-config#Documentation/git-config.txt-rebaseautoSquash</li> <li> <p>https://git-scm.com/docs/git-config#Documentation/git-config.txt-rebaseautoStash</p> </li> <li> <p>https://www.atlassian.com/git/tutorials/rewriting-history</p> </li> <li>https://www.atlassian.com/git/tutorials/rewriting-history/git-rebase</li> <li>https://www.atlassian.com/git/tutorials/rewriting-history#git-commit--amend</li> <li>https://www.atlassian.com/git/tutorials/rewriting-history/git-reflog</li> <li> <p>https://www.atlassian.com/git/tutorials/rewriting-history#git-rebase-i</p> </li> <li> <p>https://pypi.org/project/git-mr-linear/</p> </li> <li>https://stackoverflow.com/a/18330114</li> <li>https://strdr4605.com/git-hide-specific-branch-when-doing-git-log-all</li> <li>https://ohshitgit.com/</li> </ul>"}]}